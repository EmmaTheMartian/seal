#!/usr/bin/env lua

local lfs = require 'lfs'
local argparse = require 'argparse'
local seal = require 'seal'

local parser = argparse('seal', 'A metaprogrammable markup language designed for making simple websites.')
parser:argument('input', 'Input directory')
parser:option('-o --output', 'Output directory', 'output')
local args = parser:parse()

-- TODO: This feels a little hacky
local conf = nil
if args.input[#args.input] == '.' then
	conf = require(args.input:gsub('/', '.') .. 'conf')
else
	conf = require(args.input:gsub('/', '.') .. '.conf')
end

local function recursive_mkdir(path)
	local seen = ''
	for subpath in path:gmatch('(.*)/') do
		seen = seen .. subpath
		lfs.mkdir(seen)
	end
end

print ': Compiling...'
for input_file, output_file in pairs(conf) do
	print('  ' .. input_file)

	local text = seal.compile(input_file)

	if text then
		local path = args.output .. '/' .. output_file
		local dir, _ = path:match('(.*/)(.*)')
		recursive_mkdir(dir)

		local f = io.open(path, 'w')
		if f == nil then
			print('Error: Failed to open file `' .. path .. '`')
			os.exit(1)
		end
		f:write(text)
		f:close()
	end
end
print ': Done'
